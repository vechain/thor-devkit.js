import { expect } from "chai"
import { OldAbi } from "../../src"
import { ethers } from "ethers"
import * as web3 from 'web3'

describe('abi regression check', () => {

    // Low level coders
    const coder = new OldAbi.Coder()
    const ethersCoder = new ethers.AbiCoder()

    // Demonstrate compatibility between old and new ethers abi coder
    it('LOW LEVEL encode', () => {
        // Old
        expect(coder.encode(['uint256'], ['2345675643'])).equal('0x000000000000000000000000000000000000000000000000000000008bd02b7b')
        expect(() => coder.encode(['bytes32'], ['0xdf3234'])).to.throw()

        expect(coder.encode(['bytes32'], ['0xdf32340000000000000000000000000000000000000000000000000000000000'])).equal('0xdf32340000000000000000000000000000000000000000000000000000000000')
        expect(coder.encode(['bytes'], ['0xdf3234'])).equal('0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003df32340000000000000000000000000000000000000000000000000000000000')
        expect(coder.encode(['uint256'], ['2345675643'])).equal('0x000000000000000000000000000000000000000000000000000000008bd02b7b')
        expect(coder.encode(['bytes32[]'], [['0xdf32340000000000000000000000000000000000000000000000000000000000', '0xfdfd000000000000000000000000000000000000000000000000000000000000']])).equal('0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002df32340000000000000000000000000000000000000000000000000000000000fdfd000000000000000000000000000000000000000000000000000000000000')

        // New Ethers
        expect(ethersCoder.encode(['uint256'], ['2345675643'])).equal('0x000000000000000000000000000000000000000000000000000000008bd02b7b')
        expect(() => ethersCoder.encode(['bytes32'], ['0xdf3234'])).to.throw()

        expect(ethersCoder.encode(['bytes32'], ['0xdf32340000000000000000000000000000000000000000000000000000000000'])).equal('0xdf32340000000000000000000000000000000000000000000000000000000000')
        expect(ethersCoder.encode(['bytes'], ['0xdf3234'])).equal('0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003df32340000000000000000000000000000000000000000000000000000000000')
        expect(ethersCoder.encode(['uint256'], ['2345675643'])).equal('0x000000000000000000000000000000000000000000000000000000008bd02b7b')
        expect(ethersCoder.encode(['bytes32[]'], [['0xdf32340000000000000000000000000000000000000000000000000000000000', '0xfdfd000000000000000000000000000000000000000000000000000000000000']])).equal('0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002df32340000000000000000000000000000000000000000000000000000000000fdfd000000000000000000000000000000000000000000000000000000000000')

        // New Web3
        expect(web3.eth.abi.encodeParameter('uint256', '2345675643')).equal('0x000000000000000000000000000000000000000000000000000000008bd02b7b')
        // **NOTE** here WEB3 doesn't throw. This aspect MUST be handled
        // expect(() => web3.eth.abi.encodeParameter('bytes32', '0xdf3234')).to.throw()

        expect(web3.eth.abi.encodeParameter('bytes32', '0xdf32340000000000000000000000000000000000000000000000000000000000')).equal('0xdf32340000000000000000000000000000000000000000000000000000000000')
        expect(web3.eth.abi.encodeParameter('bytes', '0xdf3234')).equal('0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003df32340000000000000000000000000000000000000000000000000000000000')
        expect(web3.eth.abi.encodeParameter('uint256', '2345675643')).equal('0x000000000000000000000000000000000000000000000000000000008bd02b7b')
        expect(web3.eth.abi.encodeParameter('bytes32[]', ['0xdf32340000000000000000000000000000000000000000000000000000000000', '0xfdfd000000000000000000000000000000000000000000000000000000000000'])).equal('0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002df32340000000000000000000000000000000000000000000000000000000000fdfd000000000000000000000000000000000000000000000000000000000000')

        // Compare - New Ethers/OLD
        expect(ethersCoder.encode(['uint256'], ['2345675643']))
            .equal(coder.encode(['uint256'], ['2345675643']))

        expect(ethersCoder.encode(['bytes32'], ['0xdf32340000000000000000000000000000000000000000000000000000000000']))
            .equal(coder.encode(['bytes32'], ['0xdf32340000000000000000000000000000000000000000000000000000000000']))

        expect(ethersCoder.encode(['bytes'], ['0xdf3234']))
            .equal(coder.encode(['bytes'], ['0xdf3234']))

        expect(ethersCoder.encode(['uint256'], ['2345675643']))
            .equal(coder.encode(['uint256'], ['2345675643']))

        expect(ethersCoder.encode(['bytes32[]'], [['0xdf32340000000000000000000000000000000000000000000000000000000000', '0xfdfd000000000000000000000000000000000000000000000000000000000000']]))
            .equal(coder.encode(['bytes32[]'], [['0xdf32340000000000000000000000000000000000000000000000000000000000', '0xfdfd000000000000000000000000000000000000000000000000000000000000']]))

        // Compare - New Ethers/New Web3
        expect(ethersCoder.encode(['uint256'], ['2345675643']))
            .equal(coder.encode(['uint256'], ['2345675643']))

        expect(ethersCoder.encode(['bytes32'], ['0xdf32340000000000000000000000000000000000000000000000000000000000']))
            .equal(coder.encode(['bytes32'], ['0xdf32340000000000000000000000000000000000000000000000000000000000']))

        expect(ethersCoder.encode(['bytes'], ['0xdf3234']))
            .equal(coder.encode(['bytes'], ['0xdf3234']))

        expect(ethersCoder.encode(['uint256'], ['2345675643']))
            .equal(coder.encode(['uint256'], ['2345675643']))

        expect(ethersCoder.encode(['bytes32[]'], [['0xdf32340000000000000000000000000000000000000000000000000000000000', '0xfdfd000000000000000000000000000000000000000000000000000000000000']]))
            .equal(coder.encode(['bytes32[]'], [['0xdf32340000000000000000000000000000000000000000000000000000000000', '0xfdfd000000000000000000000000000000000000000000000000000000000000']]))
    })

    // Demonstrate compatibility between old and new ethers abi coder
    it('LOW LEVEL decode', () => {
        // Old
        expect(coder.decode(['uint256'], '0x0000000000000000000000000000000000000000000000000000000000000010')[0]).equal("16")
        expect(coder.decode(['string'], '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000')[0])
            .equal("Hello!%!")
        expect(coder.decode(['string'], '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000')[0])
            .equal("Hello!%!")

        expect(() => coder.decode(['uint256'], 'WRONG_UINT')[0]).to.throw()

        // New Ethers
        expect(ethersCoder.decode(['uint256'], '0x0000000000000000000000000000000000000000000000000000000000000010').values().next().value.toString()).equal("16")
        expect(ethersCoder.decode(['string'], '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000').values().next().value.toString())
            .equal("Hello!%!")
        expect(ethersCoder.decode(['string'], '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000').values().next().value.toString())
            .equal("Hello!%!")

        expect(() => ethersCoder.decode(['uint256'], 'WRONG_UINT').values().next().value.toString()).to.throw()

        // New Web3
        expect(new String(web3.eth.abi.decodeParameter('uint256', '0x0000000000000000000000000000000000000000000000000000000000000010')).toString()).equal("16")
        expect(new String(web3.eth.abi.decodeParameter('string', '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000')).toString())
            .equal("Hello!%!")
        expect(new String(web3.eth.abi.decodeParameter('string', '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000')).toString())
            .equal("Hello!%!")

        expect(() => web3.eth.abi.decodeParameter('uint256', 'WRONG_UINT')).to.throw()

        // Compare - New Ethers/OLD
        expect(coder.decode(['uint256'], '0x0000000000000000000000000000000000000000000000000000000000000010')[0])
            .equal(ethersCoder.decode(['uint256'], '0x0000000000000000000000000000000000000000000000000000000000000010').values().next().value.toString())

        expect(coder.decode(['string'], '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000')[0])
            .equal(ethersCoder.decode(['string'], '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000').values().next().value.toString())

        expect(coder.decode(['string'], '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000')[0])
            .equal(ethersCoder.decode(['string'], '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000').values().next().value.toString())

        // Compare - New Ethers/New Web3
        expect(new String(web3.eth.abi.decodeParameter('uint256', '0x0000000000000000000000000000000000000000000000000000000000000010')).toString())
            .equal(ethersCoder.decode(['uint256'], '0x0000000000000000000000000000000000000000000000000000000000000010').values().next().value.toString())

        expect(new String(web3.eth.abi.decodeParameter('string', '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000')).toString())
            .equal(ethersCoder.decode(['string'], '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000').values().next().value.toString())

        expect(new String(web3.eth.abi.decodeParameter('string', '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000')).toString())
            .equal(ethersCoder.decode(['string'], '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000').values().next().value.toString())

    })
})